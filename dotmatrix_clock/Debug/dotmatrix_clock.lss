
dotmatrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000706  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000706  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800140  00800140  000007da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f45  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095d  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b0  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d4  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 36       	cpi	r26, 0x63	; 99
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  9e:	0c 94 81 03 	jmp	0x702	; 0x702 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <character_write>:
		character_write((unsigned char)(bcd_minsec>>12)&0xf,CHAR_4);
		character_write((unsigned char)(bcd_minsec>>8)&0xf,CHAR_5);
		display_write(disp_ram);
    }
}
void character_write(unsigned char num,unsigned char offset){
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	unsigned char i;
	for(i=offset;i<(offset+5);i++){
  ae:	c6 2f       	mov	r28, r22
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	8e 01       	movw	r16, r28
  b4:	0b 5f       	subi	r16, 0xFB	; 251
  b6:	1f 4f       	sbci	r17, 0xFF	; 255
  b8:	c0 17       	cp	r28, r16
  ba:	d1 07       	cpc	r29, r17
  bc:	e4 f4       	brge	.+56     	; 0xf6 <character_write+0x50>
  be:	9e 01       	movw	r18, r28
		disp_ram[i]=display_num[num][i-offset];
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	ac 01       	movw	r20, r24
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	84 0f       	add	r24, r20
  ce:	95 1f       	adc	r25, r21
  d0:	ac 01       	movw	r20, r24
  d2:	4c 5f       	subi	r20, 0xFC	; 252
  d4:	5e 4f       	sbci	r21, 0xFE	; 254
  d6:	d9 01       	movw	r26, r18
  d8:	ae 5b       	subi	r26, 0xBE	; 190
  da:	be 4f       	sbci	r27, 0xFE	; 254
  dc:	2c 1b       	sub	r18, r28
  de:	3d 0b       	sbc	r19, r29
  e0:	fa 01       	movw	r30, r20
  e2:	e2 0f       	add	r30, r18
  e4:	f3 1f       	adc	r31, r19
  e6:	90 81       	ld	r25, Z
  e8:	9c 93       	st	X, r25
		display_write(disp_ram);
    }
}
void character_write(unsigned char num,unsigned char offset){
	unsigned char i;
	for(i=offset;i<(offset+5);i++){
  ea:	6f 5f       	subi	r22, 0xFF	; 255
  ec:	26 2f       	mov	r18, r22
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	20 17       	cp	r18, r16
  f2:	31 07       	cpc	r19, r17
  f4:	84 f3       	brlt	.-32     	; 0xd6 <character_write+0x30>
		disp_ram[i]=display_num[num][i-offset];
	}	
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <HT16K33_command_write>:
void HT16K33_command_write(unsigned char slaveaddr,unsigned char data){
 100:	cf 93       	push	r28
 102:	c6 2f       	mov	r28, r22
	twi_sendaddr_t(slaveaddr);
 104:	0e 94 3e 03 	call	0x67c	; 0x67c <twi_sendaddr_t>
	twi_senddata(data);
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_senddata>
	twi_stop();
 10e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <twi_stop>
}
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <HT16K33_dispdata_write>:
void HT16K33_dispdata_write(unsigned char slaveaddr,unsigned char regaddr, unsigned char data){
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	d6 2f       	mov	r29, r22
 11c:	c4 2f       	mov	r28, r20
	twi_sendaddr_t(slaveaddr);
 11e:	0e 94 3e 03 	call	0x67c	; 0x67c <twi_sendaddr_t>
	twi_senddata(regaddr);
 122:	8d 2f       	mov	r24, r29
 124:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_senddata>
	twi_senddata(data);
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_senddata>
	twi_stop();
 12e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <twi_stop>
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <display_init>:

void display_init(void){
	twi_init();
 138:	0e 94 31 03 	call	0x662	; 0x662 <twi_init>
	HT16K33_command_write(ADDRESS_HOUR,0x21); //Internal clock enable
 13c:	61 e2       	ldi	r22, 0x21	; 33
 13e:	84 e7       	ldi	r24, 0x74	; 116
 140:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_HOUR,0xa0); //row/int output pin set
 144:	60 ea       	ldi	r22, 0xA0	; 160
 146:	84 e7       	ldi	r24, 0x74	; 116
 148:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_HOUR,0xef); //Dimming set
 14c:	6f ee       	ldi	r22, 0xEF	; 239
 14e:	84 e7       	ldi	r24, 0x74	; 116
 150:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_HOUR,0x80); //Blinking set
 154:	60 e8       	ldi	r22, 0x80	; 128
 156:	84 e7       	ldi	r24, 0x74	; 116
 158:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_MINUTE,0x21); //Internal clock enable
 15c:	61 e2       	ldi	r22, 0x21	; 33
 15e:	80 e7       	ldi	r24, 0x70	; 112
 160:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_MINUTE,0xa0); //row/int output pin set
 164:	60 ea       	ldi	r22, 0xA0	; 160
 166:	80 e7       	ldi	r24, 0x70	; 112
 168:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_MINUTE,0xef); //Dimming set
 16c:	6f ee       	ldi	r22, 0xEF	; 239
 16e:	80 e7       	ldi	r24, 0x70	; 112
 170:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_MINUTE,0x80); //Blinking set
 174:	60 e8       	ldi	r22, 0x80	; 128
 176:	80 e7       	ldi	r24, 0x70	; 112
 178:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
 17c:	08 95       	ret

0000017e <display_write>:
}

void display_write(unsigned char *disp_ram){
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	8c 01       	movw	r16, r24
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char addr,index,k,data;

	for(addr=0,k=0;addr<0xf,k<8;addr+=2,k++){
 18e:	f1 2c       	mov	r15, r1
 190:	20 c0       	rjmp	.+64     	; 0x1d2 <display_write+0x54>
		data=0;
		for(index=0;index<8;index++) {
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<index;
 192:	81 91       	ld	r24, Z+
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0c 2e       	mov	r0, r28
 198:	02 c0       	rjmp	.+4      	; 0x19e <display_write+0x20>
 19a:	95 95       	asr	r25
 19c:	87 95       	ror	r24
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <display_write+0x1c>
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	99 27       	eor	r25, r25
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <display_write+0x30>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <display_write+0x2c>
 1b2:	48 2b       	or	r20, r24
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
void display_write(unsigned char *disp_ram){
	unsigned char addr,index,k,data;

	for(addr=0,k=0;addr<0xf,k<8;addr+=2,k++){
		data=0;
		for(index=0;index<8;index++) {
 1b8:	28 30       	cpi	r18, 0x08	; 8
 1ba:	31 05       	cpc	r19, r1
 1bc:	51 f7       	brne	.-44     	; 0x192 <display_write+0x14>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<index;
		}
		HT16K33_dispdata_write(ADDRESS_HOUR,addr,data);
 1be:	6f 2d       	mov	r22, r15
 1c0:	84 e7       	ldi	r24, 0x74	; 116
 1c2:	0e 94 8b 00 	call	0x116	; 0x116 <HT16K33_dispdata_write>
}

void display_write(unsigned char *disp_ram){
	unsigned char addr,index,k,data;

	for(addr=0,k=0;addr<0xf,k<8;addr+=2,k++){
 1c6:	f3 94       	inc	r15
 1c8:	f3 94       	inc	r15
 1ca:	21 96       	adiw	r28, 0x01	; 1
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	f8 16       	cp	r15, r24
 1d0:	31 f1       	breq	.+76     	; 0x21e <display_write+0xa0>
 1d2:	f8 01       	movw	r30, r16
	HT16K33_command_write(ADDRESS_MINUTE,0xa0); //row/int output pin set
	HT16K33_command_write(ADDRESS_MINUTE,0xef); //Dimming set
	HT16K33_command_write(ADDRESS_MINUTE,0x80); //Blinking set
}

void display_write(unsigned char *disp_ram){
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	db cf       	rjmp	.-74     	; 0x192 <display_write+0x14>
	}
	
	for(addr=1,k=0;addr<=0xf,k<8;addr+=2,k++){
		data=0;
		for(index=8;index<16;index++) {
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-8);
 1dc:	81 91       	ld	r24, Z+
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0c 2e       	mov	r0, r28
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <display_write+0x6a>
 1e4:	95 95       	asr	r25
 1e6:	87 95       	ror	r24
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <display_write+0x66>
 1ec:	81 70       	andi	r24, 0x01	; 1
 1ee:	99 27       	eor	r25, r25
 1f0:	02 2e       	mov	r0, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <display_write+0x7a>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <display_write+0x76>
 1fc:	48 2b       	or	r20, r24
 1fe:	2f 5f       	subi	r18, 0xFF	; 255
 200:	3f 4f       	sbci	r19, 0xFF	; 255
		HT16K33_dispdata_write(ADDRESS_HOUR,addr,data);
	}
	
	for(addr=1,k=0;addr<=0xf,k<8;addr+=2,k++){
		data=0;
		for(index=8;index<16;index++) {
 202:	28 30       	cpi	r18, 0x08	; 8
 204:	31 05       	cpc	r19, r1
 206:	51 f7       	brne	.-44     	; 0x1dc <display_write+0x5e>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-8);
		}
		HT16K33_dispdata_write(ADDRESS_HOUR,addr,data);
 208:	6f 2d       	mov	r22, r15
 20a:	84 e7       	ldi	r24, 0x74	; 116
 20c:	0e 94 8b 00 	call	0x116	; 0x116 <HT16K33_dispdata_write>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<index;
		}
		HT16K33_dispdata_write(ADDRESS_HOUR,addr,data);
	}
	
	for(addr=1,k=0;addr<=0xf,k<8;addr+=2,k++){
 210:	f3 94       	inc	r15
 212:	f3 94       	inc	r15
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	81 e1       	ldi	r24, 0x11	; 17
 218:	f8 12       	cpse	r15, r24
 21a:	05 c0       	rjmp	.+10     	; 0x226 <display_write+0xa8>
 21c:	2b c0       	rjmp	.+86     	; 0x274 <display_write+0xf6>
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	ff 24       	eor	r15, r15
 224:	f3 94       	inc	r15
 226:	f8 01       	movw	r30, r16
 228:	38 96       	adiw	r30, 0x08	; 8
}

void display_write(unsigned char *disp_ram){
	unsigned char addr,index,k,data;

	for(addr=0,k=0;addr<0xf,k<8;addr+=2,k++){
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	d5 cf       	rjmp	.-86     	; 0x1dc <display_write+0x5e>
	}
	
	for(addr=0,k=0;addr<0xf,k<8;addr+=2,k++){
		data=0;
		for(index=16;index<24;index++) {
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-16);
 232:	81 91       	ld	r24, Z+
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0c 2e       	mov	r0, r28
 238:	02 c0       	rjmp	.+4      	; 0x23e <display_write+0xc0>
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <display_write+0xbc>
 242:	81 70       	andi	r24, 0x01	; 1
 244:	99 27       	eor	r25, r25
 246:	02 2e       	mov	r0, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <display_write+0xd0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	0a 94       	dec	r0
 250:	e2 f7       	brpl	.-8      	; 0x24a <display_write+0xcc>
 252:	48 2b       	or	r20, r24
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	3f 4f       	sbci	r19, 0xFF	; 255
		HT16K33_dispdata_write(ADDRESS_HOUR,addr,data);
	}
	
	for(addr=0,k=0;addr<0xf,k<8;addr+=2,k++){
		data=0;
		for(index=16;index<24;index++) {
 258:	28 30       	cpi	r18, 0x08	; 8
 25a:	31 05       	cpc	r19, r1
 25c:	51 f7       	brne	.-44     	; 0x232 <display_write+0xb4>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-16);
		}
		HT16K33_dispdata_write(ADDRESS_MINUTE,addr,data);
 25e:	6f 2d       	mov	r22, r15
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	0e 94 8b 00 	call	0x116	; 0x116 <HT16K33_dispdata_write>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-8);
		}
		HT16K33_dispdata_write(ADDRESS_HOUR,addr,data);
	}
	
	for(addr=0,k=0;addr<0xf,k<8;addr+=2,k++){
 266:	f3 94       	inc	r15
 268:	f3 94       	inc	r15
 26a:	21 96       	adiw	r28, 0x01	; 1
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	f8 12       	cpse	r15, r24
 270:	04 c0       	rjmp	.+8      	; 0x27a <display_write+0xfc>
 272:	2a c0       	rjmp	.+84     	; 0x2c8 <display_write+0x14a>
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	f1 2c       	mov	r15, r1
 27a:	f8 01       	movw	r30, r16
 27c:	70 96       	adiw	r30, 0x10	; 16
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	d6 cf       	rjmp	.-84     	; 0x232 <display_write+0xb4>
	}
	
	for(addr=1,k=0;addr<=0xf,k<8;addr+=2,k++){
		data=0;
		for(index=24;index<32;index++) {
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-24);
 286:	81 91       	ld	r24, Z+
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0c 2e       	mov	r0, r28
 28c:	02 c0       	rjmp	.+4      	; 0x292 <display_write+0x114>
 28e:	95 95       	asr	r25
 290:	87 95       	ror	r24
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <display_write+0x110>
 296:	81 70       	andi	r24, 0x01	; 1
 298:	99 27       	eor	r25, r25
 29a:	02 2e       	mov	r0, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <display_write+0x124>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <display_write+0x120>
 2a6:	48 2b       	or	r20, r24
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
		HT16K33_dispdata_write(ADDRESS_MINUTE,addr,data);
	}
	
	for(addr=1,k=0;addr<=0xf,k<8;addr+=2,k++){
		data=0;
		for(index=24;index<32;index++) {
 2ac:	28 30       	cpi	r18, 0x08	; 8
 2ae:	31 05       	cpc	r19, r1
 2b0:	51 f7       	brne	.-44     	; 0x286 <display_write+0x108>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-24);
		}
		HT16K33_dispdata_write(ADDRESS_MINUTE,addr,data);
 2b2:	6f 2d       	mov	r22, r15
 2b4:	80 e7       	ldi	r24, 0x70	; 112
 2b6:	0e 94 8b 00 	call	0x116	; 0x116 <HT16K33_dispdata_write>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-16);
		}
		HT16K33_dispdata_write(ADDRESS_MINUTE,addr,data);
	}
	
	for(addr=1,k=0;addr<=0xf,k<8;addr+=2,k++){
 2ba:	f3 94       	inc	r15
 2bc:	f3 94       	inc	r15
 2be:	21 96       	adiw	r28, 0x01	; 1
 2c0:	81 e1       	ldi	r24, 0x11	; 17
 2c2:	f8 12       	cpse	r15, r24
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <display_write+0x152>
 2c6:	0a c0       	rjmp	.+20     	; 0x2dc <display_write+0x15e>
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	ff 24       	eor	r15, r15
 2ce:	f3 94       	inc	r15
 2d0:	f8 01       	movw	r30, r16
 2d2:	78 96       	adiw	r30, 0x18	; 24
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	d5 cf       	rjmp	.-86     	; 0x286 <display_write+0x108>
			data|=(BIT_IS_SET(disp_ram[index],1<<k))<<(index-24);
		}
		HT16K33_dispdata_write(ADDRESS_MINUTE,addr,data);
	}
	
	HT16K33_command_write(ADDRESS_HOUR,0x81);
 2dc:	61 e8       	ldi	r22, 0x81	; 129
 2de:	84 e7       	ldi	r24, 0x74	; 116
 2e0:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
	HT16K33_command_write(ADDRESS_MINUTE,0x81);
 2e4:	61 e8       	ldi	r22, 0x81	; 129
 2e6:	80 e7       	ldi	r24, 0x70	; 112
 2e8:	0e 94 80 00 	call	0x100	; 0x100 <HT16K33_command_write>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	08 95       	ret

000002f8 <main>:
uint8_t dot_flag=0,down_button,up_button;

int main(void)
{
	unsigned char i;
	DDRD=0x00;
 2f8:	1a b8       	out	0x0a, r1	; 10
	PORTD=0xc0;//Pull up resistor enable PD7,PD6
 2fa:	80 ec       	ldi	r24, 0xC0	; 192
 2fc:	8b b9       	out	0x0b, r24	; 11
	init_timer();
 2fe:	0e 94 18 03 	call	0x630	; 0x630 <init_timer>
	display_init();
 302:	0e 94 9c 00 	call	0x138	; 0x138 <display_init>
	sei();
 306:	78 94       	sei
			if(OCR2A > 2) OCR2A -= 1;
		}
		else{
			up_button = 0;
			down_button = 0;
			OCR2A=63;
 308:	c3 eb       	ldi	r28, 0xB3	; 179
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	0f 2e       	mov	r0, r31
 30e:	ff e3       	ldi	r31, 0x3F	; 63
 310:	cf 2e       	mov	r12, r31
 312:	f0 2d       	mov	r31, r0
			up_button = 1;
			down_button = 0;
			if(OCR2A > 2) OCR2A -= 1;
		}
		else if(!(PIND&0x80)&&!(PIND&0x40)){
			up_button = 1;
 314:	ff 24       	eor	r15, r15
 316:	f3 94       	inc	r15
			up_button = 0;
			down_button = 0;
			OCR2A=63;
		}
		character_write((unsigned char)(bcd_hour>>4)&0xf,CHAR_1);
		character_write((unsigned char)(bcd_hour)&0xf,CHAR_2);
 318:	00 e0       	ldi	r16, 0x00	; 0
 31a:	11 e0       	ldi	r17, 0x01	; 1
		character_write(dot_flag?10:11,CHAR_3);
 31c:	0f 2e       	mov	r0, r31
 31e:	fa e0       	ldi	r31, 0x0A	; 10
 320:	df 2e       	mov	r13, r31
 322:	f0 2d       	mov	r31, r0
 324:	0f 2e       	mov	r0, r31
 326:	fb e0       	ldi	r31, 0x0B	; 11
 328:	ef 2e       	mov	r14, r31
 32a:	f0 2d       	mov	r31, r0
	display_init();
	sei();
    /* Replace with your application code */
    while (1) 
    {
		if(!(PIND&0x40)){
 32c:	4e 99       	sbic	0x09, 6	; 9
 32e:	0b c0       	rjmp	.+22     	; 0x346 <main+0x4e>
			down_button = 1;
 330:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <down_button>
			up_button = 0;
 334:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <up_button>
			if(OCR2A > 2) OCR2A -= 1;
 338:	88 81       	ld	r24, Y
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	28 f1       	brcs	.+74     	; 0x388 <main+0x90>
 33e:	88 81       	ld	r24, Y
 340:	81 50       	subi	r24, 0x01	; 1
 342:	88 83       	st	Y, r24
 344:	21 c0       	rjmp	.+66     	; 0x388 <main+0x90>
		}
		else if(!(PIND&0x80)){
 346:	4f 99       	sbic	0x09, 7	; 9
 348:	0b c0       	rjmp	.+22     	; 0x360 <main+0x68>
			up_button = 1;
 34a:	f0 92 62 01 	sts	0x0162, r15	; 0x800162 <up_button>
			down_button = 0;
 34e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <down_button>
			if(OCR2A > 2) OCR2A -= 1;
 352:	88 81       	ld	r24, Y
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	c0 f0       	brcs	.+48     	; 0x388 <main+0x90>
 358:	88 81       	ld	r24, Y
 35a:	81 50       	subi	r24, 0x01	; 1
 35c:	88 83       	st	Y, r24
 35e:	14 c0       	rjmp	.+40     	; 0x388 <main+0x90>
		}
		else if(!(PIND&0x80)&&!(PIND&0x40)){
 360:	4f 99       	sbic	0x09, 7	; 9
 362:	0d c0       	rjmp	.+26     	; 0x37e <main+0x86>
 364:	4e 99       	sbic	0x09, 6	; 9
 366:	0b c0       	rjmp	.+22     	; 0x37e <main+0x86>
			up_button = 1;
 368:	f0 92 62 01 	sts	0x0162, r15	; 0x800162 <up_button>
			down_button = 1;
 36c:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <down_button>
			if(OCR2A > 2) OCR2A -= 1;
 370:	88 81       	ld	r24, Y
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	48 f0       	brcs	.+18     	; 0x388 <main+0x90>
 376:	88 81       	ld	r24, Y
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	88 83       	st	Y, r24
 37c:	05 c0       	rjmp	.+10     	; 0x388 <main+0x90>
		}
		else{
			up_button = 0;
 37e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <up_button>
			down_button = 0;
 382:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <down_button>
			OCR2A=63;
 386:	c8 82       	st	Y, r12
		}
		character_write((unsigned char)(bcd_hour>>4)&0xf,CHAR_1);
 388:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 38c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 390:	92 95       	swap	r25
 392:	82 95       	swap	r24
 394:	8f 70       	andi	r24, 0x0F	; 15
 396:	89 27       	eor	r24, r25
 398:	9f 70       	andi	r25, 0x0F	; 15
 39a:	89 27       	eor	r24, r25
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8f 70       	andi	r24, 0x0F	; 15
 3a0:	0e 94 53 00 	call	0xa6	; 0xa6 <character_write>
		character_write((unsigned char)(bcd_hour)&0xf,CHAR_2);
 3a4:	f8 01       	movw	r30, r16
 3a6:	80 81       	ld	r24, Z
 3a8:	65 e0       	ldi	r22, 0x05	; 5
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	0e 94 53 00 	call	0xa6	; 0xa6 <character_write>
		character_write(dot_flag?10:11,CHAR_3);
 3b0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 3b4:	81 11       	cpse	r24, r1
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <main+0xc4>
 3b8:	8e 2d       	mov	r24, r14
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <main+0xc6>
 3bc:	8d 2d       	mov	r24, r13
 3be:	6a e1       	ldi	r22, 0x1A	; 26
 3c0:	0e 94 53 00 	call	0xa6	; 0xa6 <character_write>
		character_write((unsigned char)(bcd_minsec>>12)&0xf,CHAR_4);
 3c4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <bcd_minsec+0x1>
 3c8:	60 e1       	ldi	r22, 0x10	; 16
 3ca:	82 95       	swap	r24
 3cc:	8f 70       	andi	r24, 0x0F	; 15
 3ce:	0e 94 53 00 	call	0xa6	; 0xa6 <character_write>
		character_write((unsigned char)(bcd_minsec>>8)&0xf,CHAR_5);
 3d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <bcd_minsec+0x1>
 3d6:	65 e1       	ldi	r22, 0x15	; 21
 3d8:	8f 70       	andi	r24, 0x0F	; 15
 3da:	0e 94 53 00 	call	0xa6	; 0xa6 <character_write>
		display_write(disp_ram);
 3de:	82 e4       	ldi	r24, 0x42	; 66
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 bf 00 	call	0x17e	; 0x17e <display_write>
    }
 3e6:	a2 cf       	rjmp	.-188    	; 0x32c <main+0x34>

000003e8 <__vector_7>:
	
	HT16K33_command_write(ADDRESS_HOUR,0x81);
	HT16K33_command_write(ADDRESS_MINUTE,0x81);
}

ISR(TIMER2_COMPA_vect){
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	4f 93       	push	r20
 3f8:	5f 93       	push	r21
 3fa:	6f 93       	push	r22
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
	if(dot_flag){
 400:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 404:	88 23       	and	r24, r24
 406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	64 c0       	rjmp	.+200    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		dot_flag=0;
 40a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		if((bcd_minsec&0x0f)>=9){
 40e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bcd_minsec>
 412:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bcd_minsec+0x1>
 416:	9c 01       	movw	r18, r24
 418:	2f 70       	andi	r18, 0x0F	; 15
 41a:	33 27       	eor	r19, r19
 41c:	29 30       	cpi	r18, 0x09	; 9
 41e:	31 05       	cpc	r19, r1
 420:	08 f4       	brcc	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	51 c0       	rjmp	.+162    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			if((bcd_minsec&0xf0)>=0x50){
 424:	9c 01       	movw	r18, r24
 426:	20 7f       	andi	r18, 0xF0	; 240
 428:	33 27       	eor	r19, r19
 42a:	20 35       	cpi	r18, 0x50	; 80
 42c:	31 05       	cpc	r19, r1
 42e:	08 f4       	brcc	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	43 c0       	rjmp	.+134    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
				if((bcd_minsec&0xf00)>=0x900){
 432:	9c 01       	movw	r18, r24
 434:	22 27       	eor	r18, r18
 436:	3f 70       	andi	r19, 0x0F	; 15
 438:	21 15       	cp	r18, r1
 43a:	39 40       	sbci	r19, 0x09	; 9
 43c:	b0 f1       	brcs	.+108    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
					if((bcd_minsec&0xf000)>=0x5000){
 43e:	88 27       	eor	r24, r24
 440:	90 7f       	andi	r25, 0xF0	; 240
 442:	81 15       	cp	r24, r1
 444:	60 e5       	ldi	r22, 0x50	; 80
 446:	96 07       	cpc	r25, r22
 448:	50 f1       	brcs	.+84     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
						if((bcd_hour&0xf)>=0x9){
 44a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 44e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 452:	9c 01       	movw	r18, r24
 454:	2f 70       	andi	r18, 0x0F	; 15
 456:	33 27       	eor	r19, r19
 458:	29 30       	cpi	r18, 0x09	; 9
 45a:	31 05       	cpc	r19, r1
 45c:	58 f0       	brcs	.+22     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
							bcd_minsec&=~0x0ffff;
 45e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <bcd_minsec+0x1>
 462:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bcd_minsec>
							bcd_hour&=~0x0f;
							bcd_hour+=0x10;
 466:	80 7f       	andi	r24, 0xF0	; 240
 468:	40 96       	adiw	r24, 0x10	; 16
 46a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 46e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 472:	32 c0       	rjmp	.+100    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
						}
						else if((bcd_hour&0xff)==0x23){
 474:	83 32       	cpi	r24, 0x23	; 35
 476:	49 f4       	brne	.+18     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
							bcd_hour=0x0000;
 478:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 47c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
							bcd_minsec=0x0000;
 480:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <bcd_minsec+0x1>
 484:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bcd_minsec>
 488:	27 c0       	rjmp	.+78     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
						}
						else{
							bcd_minsec&=~0xffff;
 48a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <bcd_minsec+0x1>
 48e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bcd_minsec>
							bcd_hour+=0x1;
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 498:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 49c:	1d c0       	rjmp	.+58     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
						}
					}
					else{
						bcd_minsec&=~0x0fff;
						bcd_minsec+=0x1000;
 49e:	90 5f       	subi	r25, 0xF0	; 240
 4a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bcd_minsec+0x1>
 4a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bcd_minsec>
 4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
					}
				}
				else{
					bcd_minsec&=~0x0ff;
					bcd_minsec+=0x100;
 4aa:	88 27       	eor	r24, r24
 4ac:	93 95       	inc	r25
 4ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bcd_minsec+0x1>
 4b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bcd_minsec>
 4b6:	10 c0       	rjmp	.+32     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				}
			}
			else{
				bcd_minsec&=~0x0f;
				bcd_minsec+=0x10;
 4b8:	80 7f       	andi	r24, 0xF0	; 240
 4ba:	40 96       	adiw	r24, 0x10	; 16
 4bc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bcd_minsec+0x1>
 4c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bcd_minsec>
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			}
		}
		else{
			bcd_minsec++;
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bcd_minsec+0x1>
 4cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bcd_minsec>
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		}
	}
	else{
		dot_flag=1;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	}
	
	if(up_button){
 4d8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <up_button>
 4dc:	88 23       	and	r24, r24
 4de:	09 f4       	brne	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e0:	4a c0       	rjmp	.+148    	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
		dot_flag=0;
 4e2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		bcd_minsec &=~0x00ff;
 4e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bcd_minsec>
 4ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bcd_minsec+0x1>
 4ee:	9c 01       	movw	r18, r24
 4f0:	22 27       	eor	r18, r18
		if((bcd_minsec&0xf00)>=0x900){
 4f2:	ac 01       	movw	r20, r24
 4f4:	44 27       	eor	r20, r20
 4f6:	5f 70       	andi	r21, 0x0F	; 15
 4f8:	41 15       	cp	r20, r1
 4fa:	59 40       	sbci	r21, 0x09	; 9
 4fc:	b0 f1       	brcs	.+108    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
			if((bcd_minsec&0xf000)>=0x5000){
 4fe:	88 27       	eor	r24, r24
 500:	90 7f       	andi	r25, 0xF0	; 240
 502:	81 15       	cp	r24, r1
 504:	20 e5       	ldi	r18, 0x50	; 80
 506:	92 07       	cpc	r25, r18
 508:	50 f1       	brcs	.+84     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
				if((bcd_hour&0xf)>=0x9){
 50a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 50e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 512:	9c 01       	movw	r18, r24
 514:	2f 70       	andi	r18, 0x0F	; 15
 516:	33 27       	eor	r19, r19
 518:	29 30       	cpi	r18, 0x09	; 9
 51a:	31 05       	cpc	r19, r1
 51c:	58 f0       	brcs	.+22     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
					bcd_minsec&=~0x0ffff;
 51e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <bcd_minsec+0x1>
 522:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bcd_minsec>
					bcd_hour&=~0x0f;
					bcd_hour+=0x10;
 526:	80 7f       	andi	r24, 0xF0	; 240
 528:	40 96       	adiw	r24, 0x10	; 16
 52a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 52e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 532:	72 c0       	rjmp	.+228    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
				}
				else if((bcd_hour&0xff)==0x23){
 534:	83 32       	cpi	r24, 0x23	; 35
 536:	49 f4       	brne	.+18     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
					bcd_hour=0x0000;
 538:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 53c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					bcd_minsec=0x0000;
 540:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <bcd_minsec+0x1>
 544:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bcd_minsec>
 548:	67 c0       	rjmp	.+206    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
				}
				else{
					bcd_minsec&=~0xffff;
 54a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <bcd_minsec+0x1>
 54e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <bcd_minsec>
					bcd_hour+=0x1;
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 558:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 55c:	5d c0       	rjmp	.+186    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
				}
			}
			else{
				bcd_minsec&=~0x0fff;
				bcd_minsec+=0x1000;
 55e:	90 5f       	subi	r25, 0xF0	; 240
 560:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bcd_minsec+0x1>
 564:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bcd_minsec>
 568:	57 c0       	rjmp	.+174    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
			}
		}
		else{
			bcd_minsec&=~0x0ff;
			bcd_minsec+=0x100;
 56a:	33 95       	inc	r19
 56c:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <bcd_minsec+0x1>
 570:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <bcd_minsec>
 574:	51 c0       	rjmp	.+162    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		}
	}
	else if(down_button){
 576:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <down_button>
 57a:	88 23       	and	r24, r24
 57c:	09 f4       	brne	.+2      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57e:	4c c0       	rjmp	.+152    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		dot_flag=0;
 580:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		bcd_minsec &=~0x00ff;
 584:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bcd_minsec>
 588:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bcd_minsec+0x1>
 58c:	9c 01       	movw	r18, r24
 58e:	22 27       	eor	r18, r18
		if((bcd_minsec&0xf00)==0x000){
 590:	ac 01       	movw	r20, r24
 592:	44 27       	eor	r20, r20
 594:	5f 70       	andi	r21, 0x0F	; 15
 596:	45 2b       	or	r20, r21
 598:	d1 f5       	brne	.+116    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			if((bcd_minsec&0xf000)==0x0000){
 59a:	88 27       	eor	r24, r24
 59c:	90 7f       	andi	r25, 0xF0	; 240
 59e:	89 2b       	or	r24, r25
 5a0:	79 f5       	brne	.+94     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
				if((bcd_hour&0xff)==0x00){
 5a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5aa:	81 11       	cpse	r24, r1
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
					bcd_hour=0x0023;
 5ae:	83 e2       	ldi	r24, 0x23	; 35
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					bcd_minsec=0x5900;		//hour 10
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	99 e5       	ldi	r25, 0x59	; 89
 5be:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bcd_minsec+0x1>
 5c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bcd_minsec>
 5c6:	28 c0       	rjmp	.+80     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
				}
				else if((bcd_hour&0x0f)==0x00){
 5c8:	ac 01       	movw	r20, r24
 5ca:	4f 70       	andi	r20, 0x0F	; 15
 5cc:	55 27       	eor	r21, r21
 5ce:	45 2b       	or	r20, r21
 5d0:	61 f4       	brne	.+24     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
					bcd_minsec|=0x5900;
 5d2:	39 65       	ori	r19, 0x59	; 89
 5d4:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <bcd_minsec+0x1>
 5d8:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <bcd_minsec>
					bcd_hour|=0x09;
					bcd_hour-=0x10;
 5dc:	89 60       	ori	r24, 0x09	; 9
 5de:	40 97       	sbiw	r24, 0x10	; 16
 5e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 5e8:	17 c0       	rjmp	.+46     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
				}
				else{
					bcd_hour-=0x1;//hour 1
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					bcd_minsec|=0x5900;
 5f4:	39 65       	ori	r19, 0x59	; 89
 5f6:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <bcd_minsec+0x1>
 5fa:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <bcd_minsec>
 5fe:	0c c0       	rjmp	.+24     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
				}
			}
			else{
				bcd_minsec|=0x0900;
				bcd_minsec-=0x1000;	//min 10
 600:	39 60       	ori	r19, 0x09	; 9
 602:	30 51       	subi	r19, 0x10	; 16
 604:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <bcd_minsec+0x1>
 608:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <bcd_minsec>
 60c:	05 c0       	rjmp	.+10     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
			}
		}
		else{
			bcd_minsec-=0x100;//min 1
 60e:	3a 95       	dec	r19
 610:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <bcd_minsec+0x1>
 614:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <bcd_minsec>
	}
	else if(up_button && down_button){
		dot_flag=0;
		bcd_minsec &=~0x00ff;
	}
 618:	9f 91       	pop	r25
 61a:	8f 91       	pop	r24
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <init_timer>:
void delay_us(unsigned int us);
void delay_ms(unsigned int ms);


void init_timer(void){
	TCCR0A=0x02;
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0x01;
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	95 bd       	out	0x25, r25	; 37
	TCCR1A=0x00;
 638:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=0x0c; //f/256
 63c:	9c e0       	ldi	r25, 0x0C	; 12
 63e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR2A=0x02;
 642:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B=0x06;//256div
 646:	96 e0       	ldi	r25, 0x06	; 6
 648:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	ASSR=0x20;
 64c:	90 e2       	ldi	r25, 0x20	; 32
 64e:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	OCR0A=20-1;	//20MHz
 652:	93 e1       	ldi	r25, 0x13	; 19
 654:	97 bd       	out	0x27, r25	; 39
	OCR2A=63;
 656:	9f e3       	ldi	r25, 0x3F	; 63
 658:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
//	OCR0A=8-1; //8MHz
//	OCR1A=15624;
//	OCR2A=100-1;
//	TIMSK0=0x02;
//	TIMSK1=0x02;
	TIMSK2=0x02;
 65c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 660:	08 95       	ret

00000662 <twi_init>:
		case 0x58:	return -1;
				break;
		default: return TWSR&0xf8;
	}
	
}
 662:	ec eb       	ldi	r30, 0xBC	; 188
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	10 82       	st	Z, r1
 668:	80 e1       	ldi	r24, 0x10	; 16
 66a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 66e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 672:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 676:	84 e0       	ldi	r24, 0x04	; 4
 678:	80 83       	st	Z, r24
 67a:	08 95       	ret

0000067c <twi_sendaddr_t>:
 67c:	94 ea       	ldi	r25, 0xA4	; 164
 67e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 682:	ec eb       	ldi	r30, 0xBC	; 188
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	90 81       	ld	r25, Z
 688:	99 23       	and	r25, r25
 68a:	ec f7       	brge	.-6      	; 0x686 <twi_sendaddr_t+0xa>
 68c:	e9 eb       	ldi	r30, 0xB9	; 185
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	90 81       	ld	r25, Z
 692:	90 81       	ld	r25, Z
 694:	88 0f       	add	r24, r24
 696:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 69a:	84 e8       	ldi	r24, 0x84	; 132
 69c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6a0:	ec eb       	ldi	r30, 0xBC	; 188
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	88 23       	and	r24, r24
 6a8:	ec f7       	brge	.-6      	; 0x6a4 <twi_sendaddr_t+0x28>
 6aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 6ae:	88 7f       	andi	r24, 0xF8	; 248
 6b0:	88 31       	cpi	r24, 0x18	; 24
 6b2:	41 f0       	breq	.+16     	; 0x6c4 <twi_sendaddr_t+0x48>
 6b4:	80 32       	cpi	r24, 0x20	; 32
 6b6:	11 f4       	brne	.+4      	; 0x6bc <twi_sendaddr_t+0x40>
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	08 95       	ret
 6bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 6c0:	88 7f       	andi	r24, 0xF8	; 248
 6c2:	08 95       	ret
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret

000006c8 <twi_senddata>:
 6c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 6cc:	84 e8       	ldi	r24, 0x84	; 132
 6ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6d2:	ec eb       	ldi	r30, 0xBC	; 188
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	88 23       	and	r24, r24
 6da:	ec f7       	brge	.-6      	; 0x6d6 <twi_senddata+0xe>
 6dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 6e0:	88 7f       	andi	r24, 0xF8	; 248
 6e2:	88 32       	cpi	r24, 0x28	; 40
 6e4:	41 f0       	breq	.+16     	; 0x6f6 <twi_senddata+0x2e>
 6e6:	80 33       	cpi	r24, 0x30	; 48
 6e8:	11 f4       	brne	.+4      	; 0x6ee <twi_senddata+0x26>
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	08 95       	ret
 6ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 6f2:	88 7f       	andi	r24, 0xF8	; 248
 6f4:	08 95       	ret
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	08 95       	ret

000006fa <twi_stop>:

void twi_stop(void){
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 6fa:	84 e9       	ldi	r24, 0x94	; 148
 6fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 700:	08 95       	ret

00000702 <_exit>:
 702:	f8 94       	cli

00000704 <__stop_program>:
 704:	ff cf       	rjmp	.-2      	; 0x704 <__stop_program>
